{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","context/index.js","components/MainPage.js","constants.js","api/api.js","registerServiceWorker.js","index.js","containers/App.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","cardsArray","robots","map","user","index","key","SearchBox","searchText","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","React","Component","CounterButton","color","_useState","useState","_useState2","slicedToArray","count","setCount","onClick","Header","nextProps","nextState","RobotsContext","createContext","MainPage","setSearchText","_useContext","useContext","requestRobots","useEffect","isPending","components_Header","event","target","value","components_ErrorBoundary","filter","robot","toLowerCase","includes","Constants","CHANGE_SEARCH_FIELD_ACTION","REQUEST_ROBOTS_STATE_PENDING","REQUEST_ROBOTS_STATE_SUCCESS","REQUEST_ROBOTS_STATE_FAILED","JSON_PLACEHOLDER_URL","apiCall","link","fetch","then","response","json","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","_useReducer","useReducer","action","objectSpread","payload","_useReducer2","dispatch","context","Provider","data","MainPage_MainPage","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e5d85d34.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Card ({ name, email, id }) {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='robot profile'/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport Card from './Card'\n\nexport default function CardList ({ robots }) {\n  const cardsArray = robots.map((user, index) => {\n    return <Card key={index} id={user.id} name={user.name} email={user.email} />\n  })\n\n  return (\n    <div>\n      {cardsArray}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function SearchBox ({ searchText, searchChange }) {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search robots...'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Scroll (props) {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  )\n}\n","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      hasError: false,\n      error: null\n    }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true, error })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Oops. That is not good</h1>\n    } else {\n      return this.props.children\n    }\n  }\n}\n\nexport default ErrorBoundary\n","import React, { useState } from 'react'\n\nexport default function CounterButton ({ color }) {\n  const [count, setCount] = useState(0)\n  return <button color={color} onClick={() => setCount(count + 1)}>Count: {count}</button>\n}\n","import React from 'react'\n\nimport CounterButton from './CounterButton'\n\nclass Header extends React.Component {\n  shouldComponentUpdate (nextProps, nextState) {\n    return false\n  }\n\n  render () {\n    return (\n      <div>\n        <CounterButton color={'red'} />\n        <h1 className=\"f1\">RoboFriends</h1>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","import { createContext } from 'react'\n\nconst RobotsContext = createContext([])\n\nexport default RobotsContext\n","import React, { useContext, useEffect, useState } from 'react'\n\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport Header from '../components/Header'\n\nimport RobotsContext from '../context'\n\nimport './MainPage.css'\n\nexport default function MainPage (props) {\n  const [searchText, setSearchText] = useState('')\n  const { state, requestRobots } = useContext(RobotsContext)\n\n  useEffect(() => {\n    requestRobots()\n  }, [])\n\n  function filterRobots () {\n    return state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchText.toLowerCase())\n    })\n  }\n\n  function onSearchChange (event) {\n    setSearchText(event.target.value)\n  }\n\n  const { isPending } = state\n  if (isPending) {\n    return <h1 className=\"tc\">Loading...</h1>\n  } else {\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filterRobots()}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    )\n  }\n};\n","const CHANGE_SEARCH_FIELD_ACTION = 'CHANGE_SEARCH_FIELD'\n\nconst REQUEST_ROBOTS_STATE_PENDING = 'REQUEST_ROBOTS_STATE_PENDING'\nconst REQUEST_ROBOTS_STATE_SUCCESS = 'REQUEST_ROBOTS_STATE_SUCCESS'\nconst REQUEST_ROBOTS_STATE_FAILED = 'REQUEST_ROBOTS_STATE_FAILED'\n\nconst JSON_PLACEHOLDER_URL = 'https://jsonplaceholder.typicode.com/users'\n\nconst Constants = {\n  CHANGE_SEARCH_FIELD_ACTION,\n  REQUEST_ROBOTS_STATE_PENDING,\n  REQUEST_ROBOTS_STATE_SUCCESS,\n  REQUEST_ROBOTS_STATE_FAILED,\n  JSON_PLACEHOLDER_URL\n}\n\nexport default Constants\n","export const apiCall = (link) => fetch(link).then(response => response.json())\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'tachyons'\nimport App from './containers/App'\nimport './index.css'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n","import React, { useReducer } from 'react'\n\nimport MainPage from '../components/MainPage'\nimport RobotsContext from '../context'\nimport Constants from '../constants'\nimport { apiCall } from '../api/api'\n\nexport default function App (props) {\n  const [ state, dispatch ] = useReducer((state, action) => {\n    switch (action.type) {\n      case Constants.REQUEST_ROBOTS_STATE_PENDING:\n        return {\n          ...state,\n          isPending: true\n        }\n      case Constants.REQUEST_ROBOTS_STATE_SUCCESS:\n        return {\n          ...state,\n          robots: action.payload,\n          isPending: false\n        }\n      case Constants.REQUEST_ROBOTS_STATE_FAILED:\n        return {\n          ...state,\n          error: action.payload,\n          isPending: false\n        }\n      default:\n        return state\n    }\n  }, {\n    isPending: false,\n    robots: [],\n    error: null\n  })\n\n  function requestRobots () {\n    dispatch({ type: Constants.REQUEST_ROBOTS_STATE_PENDING })\n    apiCall(Constants.JSON_PLACEHOLDER_URL)\n      .then(data => dispatch({ type: Constants.REQUEST_ROBOTS_STATE_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: Constants.REQUEST_ROBOTS_STATE_FAILED, payload: error }))\n  }\n\n  return (\n    <RobotsContext.Provider value={{ state, dispatch, requestRobots }}>\n      <MainPage />\n    </RobotsContext.Provider>\n  )\n};\n"],"sourceRoot":""}